CKA -

Orientaion - 8:30 - 9:30PM IST 

Main Session - 13th Jan 2024 - 8:30PM - 11:30PM IST

CKA - 


LAB Session ::: 

	AWS - VMs
	
	GITHUB - account - 
	
	
#######################
Day 1 - 13th Jan. 2024
#######################
	
	Pre-requisities :::
	
		Lab :::
		
			AWS Cloud Platform :
			
				Create a AWS free tier Account. 12 months 
					Active Mobile Number
					Active Email ID 
					Active Credit/Debit Card - International Transaction enabled.
					
					https://aws.amazon.com/console/
				
				
		
		Class Notes & Documents :		
					github - Repository 
					
					Create github account.					
					https://github.com/
					
					
		DockerHub :::
					Container Registry
					https://hub.docker.com/
					
					
		
		Introduction to Kubernetes :::
		
			Application Builds and Deployments :::
			
			Application ???
			
				Kubernetes is Open-Source Container Orchestration Tool :
				It is used to Deploy the Micro-Service Based Applications and Services 
				Used to Achieve Continuous Deployment without Downtime
				
			Deployment ???
			
				What is Application Deployment ???
				
					Artifacts ???  --> Artifacts contain the source code of the application
					
				Life Cycle of Application :::
					
					Developed 		--> 	Java Web Application - *.java (High Level Language)
					
					Build 			--> 	Compile the source Code 
					
					Create Artifacts -->  	Binaries (Executable code) *.exec/*.war/*.jar/*.dll/
					
					Artifacts are Deployed to Target Environments (QA/UAT/PROD)
					
				Environments ::
				
				Non-PROD Environment															Production Environment
					
				Dev Environment
				Build Environment		Unit Testing 
				Testing
					QA - Quality Assurance Testing 
						
					UAT - User Acceptance Testing						=====>						Prod Environment
					
			
			
			Scenario 1 ::
			
			
				Developer :: Create Java Program  *.java  IDE   +20 Lines 
			
				build 			- Compile & Create Artifacts	mywebwebapp.war
				
				Unit Testing 	-	Run the Application --
									Web Application Server  - Tomcat / Nginx
									
									openjdk11,Tomcat8.0 --> Tested the Application, and completed Unit Testing   mywebwebapp_Img1
									
									Docker --> Build an appln Image - mywebwebapp_Img1(mywebwebapp.war,openjdk11,Tomcat8.0)
									
				Containerization ::
				
						It is a process of packaging the Application along with the dependencies. 
									
				Promote the Appln. 
				
				QA	Environment		-	mywebwebapp_Img1	& run the application using containers.
				
				UAT Environment		- 	mywebwebapp_Img1	& run the application using containers.
				
				PROD Environment	- 	mywebwebapp_Img1	& run the application using containers.
				
				Docker Engine :::
	
					Create Application image 
					Create Containers 
					Docker Compose 	-- Run Multiple Containers as a single Service.
					
							Application Service -- created using 3-tier Application Architecture ::
							
								Front_End Layer				C1
								Application Layer			C2 
								Back_End Database Layer 	C3
				
					Container Orchestration Tool :::
						
						Docker Swarm 	-- Orchestrate the Containers 	- only for Docker Container
								It is used to combine, and ensure High Availability of Containers
								Create Replicas of Containers.
								
								Auto-Scaling 
								Load Balancing
					
					
				Kubernetes 				-- Orchestrate the Containers
			
				Kubernetes is Open-Source Container Orchestration Tool
				It is used to Deploy the Micro-Service Based Applications and Services 
				Used to Achieve Continuous Deployment without any Downtime
					Supports Replicas, Auto-Scaling, Load-Balancing
					
						10000 Users		50 Replicas of Containers 

						50000 Users More Traffic 
			
				Managed Services :::		
				
					AWS - EKS 
					Azure - AKS
					GCP - GKS
					
				
				Monolith Application Architecture :::
							Tightly Coupled Application :::
							A **tightly coupled application** refers to a software system in which the components or modules are highly dependent on each other. This means that changes to one component often require changes to others, making the system less flexible and harder to maintain. Tightly coupled applications typically share data and control in a way that the modules are interdependent.

                            Key characteristics of tightly coupled applications include:

                            1. **Direct dependencies**: Modules or components are directly linked, often with complex, hardcoded references between them.
                            2. **Lack of flexibility**: Modifying one component may affect multiple others, leading to potential issues with scalability and future updates.
                            3. **Difficult maintenance**: Because of the interdependencies, testing and updating specific parts of the system can be time-consuming and error-prone.
                            4. **Reduced modularity**: The systemâ€™s components are not easily replaceable or reusable independently.

                            In contrast, a **loosely coupled application** allows components to interact with minimal dependency, making it more adaptable, scalable, and maintainable.

                            Tightly coupled systems are typically seen in older, monolithic architectures, whereas modern architectures (like microservices) focus on loosening these dependencies for better scalability and maintainability.
							
					Billing System :: Destop Application 

						Functions ::
							UI
							Billing Process 	--> fix the issue 
							Stock Maintainence 
							Data Log 
							Customers Database Mgmt
				
				Micro-Service Based Application Architecture :::
							Loosely Coupled Application :::
				
					Web Application :::
					Mobile Apps :::::
					
					Netflix / amazon.com ==> web appln
					
					www.amazon.com 
					
					user_registration 	- Service1 - developer1 -  independently developed - tested, deployed to QA/UAT , Released to Prod
					Sign_In 			- Service2 - developer2 -  independently developed - tested, deployed to QA/UAT , Released to Prod
					Search 
					Add to Cart 
					Place the order 
					payment 
					confirm the order 
					track the order 
					sdfg				-	
						
						
				What is DevOps ???
				
					DevOps is software Development Strategy to promote the collaboration between the teams like Development Team and the Operation Team to achive Continous Development, Continous Integration, Continous Testing, Continous Delivery / Deployment and Continous Monitoring in more automated fashion.
				
				
				
				DevOps Stage ::

					Continous Development 
							- it is a capability of Development team to do continuous Coding *.java 
							
						Use IDEs - Integrated Development Environment - VS Code, Visual Studio, Eclipse, pycharm - can be easily integrated with GIT, Jenkins
					
					Continous Integration
					        Continuous Integration (CI) is a software development practice where code changes are automatically integrated into a shared repository several times a day. The key idea is to frequently commit small, incremental updates to the codebase, which are then automatically tested and validated. This helps ensure that new changes don't break existing functionality, promotes collaboration, and improves the overall quality of the software.

							Integrated the changes (Artifacts / Images) 
							
						Tools ::: jenkins, docker, kubernetes 
					
					Continous Testing 
						Tools : jenkins, selenium 
					
					Continous Delivery / Deployment
						Both are meant for Production Release . 
					
						Continous Delivery 		==> Expect Manual Approval for Production Release 
						
						Continous Deployment	==> It is completely Automated. Doesnt required any Manual approvals
						
						Without any Downtime ! 
						
						Kubernetes !
					
					Continous Monitoring 
						
				Tele-Comm 
				
				Tele-comm SP1	Intro. New Offer to Customers -- > shd be released ASAP ...
				
				SP2 
				
				Banking '	
				
				Financial 
				Retails 
				
				
				Code Promotion 
				
				deployment 
				
				PROD Release 

			Kubernetes Architecture :::
			
			Core Concepts of Kubernetes ::
			
	
#######################
Day 2 - 14th Jan. 2024
#######################		
		
			Kubernetes Architecture :::
			
			Install of Kubernetes 
			
			Core Concepts of Kubernetes ::	
		
		
			Container Registry ::: DockerHub
			
			Repository ::: Is a subset of Container Registry
			
			
			Environments ::
			
				Dev 
				
				Build 
				
				QA 
				
				UAT 										=======>>							PROD VMs -- 

				Non-Prod
				Kubernetes_Master Node (VM) 	==> Used to define and schedule the Deployments.
						Worker_Node1	(VM)	Application -- Replicas of Containers 3 Replicas 
						Worker_Node2	(VM)
						Worker_Node3	(VM)




















				Prod
				Kubernetes_Master Node (VM) 	==> Used to define and schedule the Deployments.
					1	Worker_Node1	(VM)	Application -- Replicas of Containers 3 Replicas 
					2	Worker_Node2	(VM)
						








				Kubernetes_Master - called as master of masters
					Kubernetes_Master1 
						Kubernetes_Cluster1
							Worker_Node1	(VM)
							Worker_Node2	(VM)						
							Worker_Node3	(VM)					
						Kubernetes_Cluster2
							Worker_Node1	(VM)
							Worker_Node2	(VM)						
							Worker_Node3	(VM)			
					Kubernetes_Master2
						Kubernetes_Cluster1
							Worker_Node1	(VM)
							Worker_Node2	(VM)						
							Worker_Node3	(VM)					
						Kubernetes_Cluster2
							Worker_Node1	(VM)
							Worker_Node2	(VM)						
							Worker_Node3	(VM)		



			Terminologies :::
			
				- Images 			-- Static file used used to create containers 
				
				- Containers 		- Executable units of the Images 
				
				- Pods 				- Atomic unit of schedule/task 
				
				- Kubectl 			- Command Line Utility used to interact with Kubernetes Master 
				
				- Kubernetes_Master	- Used to Define and Schedule the Pods to WorkNodes 
				
				- Kubernetes_Cluster1  - It is Logical Grouping of WorkNodes/ 
				
				- Kubernetes_WorkNodes - It is used to run the application Pods.
				
				
			Installation & Configuration of Kubernetes ::::
			
				1. Launch the Required VMs in ur Cloud Platform.
				2. Open all the required Ports 
				3. Login to All VMs.
					Kubernetes_Master Node (VM) 	==> Used to define and schedule the Deployments.
						Worker_Node1	(VM)	Application -- Replicas of Containers 3 Replicas 
						Worker_Node2	(VM)
				4. Execute some Commands in all the Nodes 
					- Install Docker 
					- Install CRI - Container Runtime Interface - ContainerD
					- Start ContainerD 
					- Install - Kubeadm, kubectl, kubelet
					- Disable the Swap
					- Start Kubelet 
				
				5. Execute some Commands only in MasterNode
					- kubeadm init 
				
				5. Execute some Commands only in WorkNodes 
					- kubeadm join 
			

		1. Launch the Required VMs in ur Cloud Platform.
					
			Login to AWS Console
			
			Choose default Region
			
			Search for EC2 
			
			EC2 Dashboard :::
			
				Launch Instances 
				
					AMI : Ubuntu Server 20.04
					Instance Type : t2.micro
					Key Pair create New 
					No. Of Instance : 3
					
				Connect to EC2 Instances :	
					- EC2 instance Connect 
					
					- SSH Agents - MobaXterm/Putty
						*MobaXterm - Install in the Local Machine (Windows)
						https://mobaxterm.mobatek.net/download.html
						
					- Terminal 				
		
		
#######################
Day 3 - 20th Jan. 2024
#######################	

		
		Kubectl 
			Commands / Syntax
		
		Pods 
			How Pods are deployed 
			Pod Networking 
			
		Installation and Configuration of Kubernetes Cluster.
		
		Write the Manifest files to create pods & any Kubernetes Objects
					
		
		Kubectl 
			Commands / Syntax
			Syntax: 
				kubectl <command> <type> <Object_name> <arg..> 
			Eg: 
				kubectl get pod <mywebapppod1> -o wide
				
		Pods 
			How Pods are deployed 
			Pod Networking 
			

			Installation & Configuration of Kubernetes ::::
			
				1. Launch the Required VMs in ur Cloud Platform.
				2. Open all the required Ports 
				3. Login to All VMs.
					Kubernetes_Master Node (VM) 	==> Used to define and schedule the Deployments.
						Worker_Node1	(VM)	Application -- Replicas of Containers 3 Replicas 
						Worker_Node2	(VM)
				4. Execute some Commands in all the Nodes 
					- Define the Unique Node Name
					- Install Docker 
					- Install CRI - Container Runtime Interface - ContainerD
					- Start ContainerD 
					- Install - Kubeadm, kubectl, kubelet
					- Disable the Swap
					- Start Kubelet 
				
				5. Execute some Commands only in MasterNode
					- kubeadm init 
				
				5. Execute some Commands only in WorkNodes 
					- kubeadm join 
			

		Write the Manifest files to create pods & any Kubernetes Objects :::
		
		Application Development & Deployment Workflow :::
		
		Non-Prod Environment :::
		
			Dev Environment 		==> Coding 
			Build 					==> Build - Compile & Create Artifacts(binaries) *.war
										Using Docker - We Create Application Image.
										Publish Application Image to Container Registry 
										
			Kubernetes_Master		==> It runs only the Kubernetes System Related Pods 
										It Deploy/Schedule the Pods to the WorkerNodes 
				Kubernetes_WorkNode1
				Kubernetes_WorkNode2
										
										
			NameSpace 			==> It is Logical Partition of the Kubernetes Cluster.
			
		How to Define a Pod using Manifest file??
		
			- How to write the Manifest File ::
			
				- *.yaml		Key:value pairs	# Declarative Scripts
				- *.json
	
		Kubernetes Developer
		Kubernetes Admins 
		DevOps Team
		
		
		In Containers ::
			Port Mapping/Binding ::
			
			docker run -it -p <host_port>:<container_port> tomcat bash
							
					
			
#######################
Day 4 - 21st Jan. 2024
#######################	

		Controller Objects ::
		
			Replication Controller 
			Replicaset
			Deployment 
			Daemonset 	


		Replicas of Pod :::
		
			1 copy of pod deployed .
			
			3 copies of pods 
			
			Scale-Up 
			
			Scale-Down
			
			
		How to deploy//Upgrade the Applications without any downtime ????
		
			
			Deployment Controller Object.
				1. It is used to create replicas of Pods
				2. Used to Upgrade the Application Version without any downtime (v1.0 to  v1.1)
				3. Downgrade/rollback the applications  without any downtime
				4. Scale-Up 
				5. Scale-Down 
				
			Prod_Server =>  mywebapp_v1.0		==> 	mywebapp_v1.1	
			
			Replicas 3 ==> Used to ensure high availability of pods.
			
			pod_instance1(mywebapp_v1.0)		==>		mywebapp_v1.1	
			pod_instance2(mywebapp_v1.0)
			pod_instance3(mywebapp_v1.0)
			
			Deployment Stratagies: 
			
				- Rolling Update Strategy	*Default 
					--> It will update a copy of pod with new version of Image
							pod_instance1(mywebapp_v1.1)
							
			If deployment of new version fails, we can do rollback.
							
				- Canary / Blue-green Deployments
			
			
			Define Deployment Controller Objects :::
			
				deployment objects
				replicaset 
				pod instances.


			Replicaset/Replication Controller  					(vs) Deployment 
				Just to create Copies of pod instances					1. It is used to create replicas of Pods 			v1.0  =  v1.1
				To perform Scale-Up/Down                                2. Used to Upgrade the Application Version without any downtime
                                                                        3. Downgrade/rollback the applications  without any downtime
                                                                        4. Scale-Up 
                                                                        5. Scale-Down 
																		
		
		Replicaset :
			It is used to deploy a specific no. of pods in the available node.
			It is to ensure high availability
			
		Daemonset - Controller Object!
			It is used to deploy a copy of Pod in all the available Nodes.
			
			
			Worker_Node1	--> Monitoring tool/Log/Metrix Tools using pod
			Worker_Node2 	--> Monitoring tool/Log/Metrix Tools using pod
			Worker_Node3	--> Monitoring tool/Log/Metrix Tools using pod
			
		Kubernetes Volumes :
		
			Stateful Applications :::
			
			Containers were initially used only for Stateless Applications.
			
			Micro-Service Based Application :::
			
			Deploy - 3 - tier Application ::
			
				Front_End(GUI)
				
				Application_Layer
				
				Back_End(Database)
				
				
			Container Volume :::
			
			Containers / Pods are NOT the permanent Entities.
			
			Even If the pod/container is lost, the data should be preserved.
			
			Persistant Volumes:::
			
			Types of Kubernetes Volumes ::
			
			- EmptyDir		*Temporary. Once the Pod is delete, this EmptyDir Also gets deleted.
			
			- Hostpath Volume 
			
			- ConfigMaps 
			
			- Secrets 
			
			- Persistant Volumes 
			
			- Persistant Volume Claim


			
			- ConfigMaps == Are used to send the Non-Sensitive Data to the pod
							
			- Secrets 	 == Are used to send the Sensitive Data to the pod		
							The data are accessible within the pod.
							The secret are not accessible outside the pod.
			
			
			
		
			mywebapp.war 		--> mywebappImage_v1.0	
										- QA 
										- UAT 
										- PROD 
			
				
	#######################
Day 5 - 27th Jan. 2024
#######################	


		- Kubernetes Storage Concepts 
		
				Developer 
				
						Pod :
						
						 1TB of Volume 
						 
						 
				Persistant Volumes 
				
				Static and Dynamic Provision ::

				Persistant Volumes Claim 
				
				
				Hostpath Volume ::::
				
				Kubernetes_Master 
					WN1
					WN2
					WN3
					WN4
				
				When we deploy a pod 
		
		- Kubernetes Services 

				- ClusterIP Service 		# Default
		
				- NodePort Service 

				- Load Balancer Service 
				
				
				Pod1		 			<===> 			Pod2 
				src:x.x.x.x								y.y.y.y
				dest:y.y.y.y
				
				
				
			3-Tier Application Architecture ::: Service 
			
			Front_End 				Podf1,f2,f3
			
			
			Application_Layer		PodA1,A2,A3
			
			
			Back_End(DataBase)		PodD1,D2,D3
			
			
		NodeSelector ::
		
Next : 

	Ingress Controller 
	
	Scheduler 
	
	Security 
	
	Trouble-shooting & Monitoring 
	
	HELM Chart 
		Craete Kubernetes Dashboard 

		
		
#######################
Day 6 - 28th Jan. 2024
#######################	


		Ingress Controller Object.
		
		Security 
		
		Trouble-shooting & Logs

	Demos ::
		HELM Chart 
			Craete Kubernetes Dashboard (Prometheus & Grafana)
		
		CICD Pipeline --> Using Jenkins -- Automated Build and Deployments using kubernetes
		
			Java Maven Spring boot web application 
			
		Installation & Configuration of Kubernetes using kubeadm
		
		Storage Concepts 
		
		Controller Objects & Scheduling 
		
		Services and Networking :: Network plugins - Flannels Network Plugins 
		
		Security - Namespaces!
		
		Trouble-shooting and Monitoring Logs 
		
		
		Ingress Controller Object :::
		
		Node port serivces is meant for a specific micro-service 
		
		Web Application -- 100 Micro-Service 
		
		Load-Balancer Service    ==>  Ingress Controller
		
		How the Load Balancer -- 
		
		Label and Selector
		
		

		
		Routing ::
		
			Simple Routing 
			
			Path based Routing :::
			
				www.gmail.com 				LB Services 
				www.gmail.com/inbox 		Path based routing in Ingress Rules
				www.gmail.com/sent
				www.gmail.com/trash			
				
			Host based Routing 
			
				www.google.com 
				maps.google.com 
				translate.google.com
				mail.google.com 	
					www.gmail.com/inbox 		Path based routing in Ingress Rules
					www.gmail.com/sent
					www.gmail.com/trash			
					
					
			DNS Entries :::
			
			Load Balancer - xxx.yyy.zzz.ccc	(LB IP_Address)
			
			DNS Entries :::
			
				www.google.com 
				maps.google.com 
				translate.google.com
				mail.google.com 
				
				
		Ingress Controller :::
		
			Define the Ingress controller 			- using Nginx
			
			Define the Ingress Resources Rules 		- *.yaml - ingress - Host/Path/Single_Service
			
			
		Namespace :::::
		
			Logical Partitioning of the Cluster.
			
			Dev_Team1 --> Deploy their pods 
			
				Namespace !!!
				
			kube-system
			kube-flannel 
			default 
			QA 
			UAT 
			PROD 
				
					Default Namespace 
					
		Kubernetes Security  ::::
		
		
			API Server :::: 
			
			
			Role 
			
				Namespace Level 
				
				Cluster Level 
				
		
Next :::

	Demos ::
		HELM Chart 
			Craete Kubernetes Dashboard (Prometheus & Grafana)
		
		CICD Pipeline --> Using Jenkins -- Automated Build and Deployments using kubernetes
		
			Java Maven Spring boot web application 
			
	
		
		
#######################
Day 7 - 3rd Feb. 2024
#######################	

	Demos ::
		HELM Chart 
			Craete Kubernetes Dashboard 
		
		CICD Pipeline --> Using Jenkins -- Automated Build and Deployments using kubernetes
		
			Java Maven Spring boot web application 
			
	
	Node Selector ????
	
	Scheduling
	
	ETCD --> volume 
	
	
	Kubernetes_Master(Passive_Node)
		Kubernetes_Master(Active_Master)		- Control Plane
		
			Worker_Node1
			Worker_Node2
			Worker_Node3
			
				
	default 		# for application pod deployments 
	kube-system
	kube-flannel
	
	
	Infra-Structure Perspective -> 
	
	snaptshot - volume 

Deployment ::::	
	
	Non-Prod 									NameSpace : DEV/QA/UAT	--> Business Hours										
		Kubernetes_Master(Active_Master)	
			
			Worker_Node1			Pod1
			Worker_Node2
			Worker_Node3

			
	Prod 										NameSpace : Prod(Active) 24/7
		Kubernetes_Master(Active_Master)
			
			Worker_Node1
			Worker_Node2
			Worker_Node3
			

Deployment :::

	Scheduler to deploy the pods in the Nodes.
	
		Scheduler Identifies the Healthy Worker Node for Deployment !!!
		
		From ETCD, it collects the details of the workerNodes.
		
		In Manifest file, pods specifications 
	
	Node-Selector -- It helps to select the Node for deployment.
	
		Kubernetes_Master(Active_Master)
			
			Worker_Node1	(label the node) ssd		kubectl taint node_name1 key:no_schedule
			Worker_Node2	hdd
			Worker_Node3 	ssd
			
			Labels & Selectors are used during the Scheduling.
			
			

Kubernetes Package Manager ::::

		Package Manager ????
		
			Linux - 
				Ubuntu	- apt 		- Install/Unstall/Update the Packages.
				centos/rhel - yum 
				Fedoro 	- dnf 
				curl 
				
		Helm - Is a Package Manager for Kubernetes.
		
			https://helm.sh/docs/intro/install/
			
			
			- Installed HELM 
			
			- Using Helm we can install a package for Kubernetes

				Monitoring Dashboards 
				
				Kubernetes_Dashboard is Package to create Dashboards for Open-Source Kubernetes
			
			
			13.233.98.213:30415	
			https://13.233.98.213:30415/
				
				
				
				user --> should have access to kubernetes_Dashboard svc 
				
				Create User ID 			- Service ID
				
				Give Admin Access 		- Create Role / Cluster Role ?
				
				NameSpace level
				
				Cluster Level 
				
				
#######################
Day 8 - 4th Feb. 2024
#######################		


		
		Deployments ::
		
			Kubernetes is used to deploy micro-service based applications!
			

			
			Continous Delivery 		->	It expects the manual approvals for production releases.
										Might have down-time during production release
			
			Continous Deployments 	-> It is used to deploy the services to production without any manual approvals.
	                                   This can be achieved without any down-time during production release
									   
										Deployment controller object. --> Deployment Strategy : Rolling Update Strategy
										Service - NodePort Service.
										
									    Blue-Green Deployment 	==> Namespaces 
										
										Production Kubernetes_Master 				NameSpace(ActiveProd_App_V1.1) LIVE Environment - Stopped.
													WN1,WN2,WN3,WN4,...
										
										App_v2.0									NameSpace(ActiveProd_App_v2.0) LIVE Environment
										App_v2.1
										App_v2.2
										App_V3.0
								
			
					Production Server -- Active App_V1.0		LIVE	Down this server
					
					Production Server -- Passive App_V2.0		LIVE  changed to Active 
					
		
		DevOps Team :::
		
			Manage the Source Code Repositories 
			
			Jenkins 
			
			Docker Builds 
			
			Ansible/Terraform 
			
			Kubernetes 
			
			
			Automated Builds and Deployments - 
				CICD Pipeline :::
				
				Jenkins - Build Orchestration Tool 
				
				Java Web Application :::
				
					Continous Development Approach;
					
						Commit the changes to Src_Code Repo.(Github)
						
					Using DevOps :
					
						Automate the Application Build :
							- Process of compiling the source code and create artifacts(Binaries - *.war/*.jar) 
						Automate Unit Testing 
						Deployed to Target Environments(QA/UAT) for further Testing 
						Notify the users about the process 
						
						Deployed to Prod_Environment.
						
						
				Jenkins is one of the open source build orchestration tools
					used to create Build and Deployment Pipeline Projects
					
				Azure Pipeline
				AWS CodePipeline 
				Bamboo
				gitlab-ci
				github action
				
				Detailed Accessment of the Existing Environment, Application build and deployment process : 
				
				Kubernetes Admins :
				
					Define the Target Environments :::
							
					Non-Prod 				Prod 
					Namespaces				Namespaces 
					
					
				Design the Infra-Structure :::
				
					CICD ->
					
				Servers ::::
					
						Jenkins_Master 			--> Used to Create Jenkins Projects/Pipeline Jobs & Schedule the Jenkins Projects to Slave Nodes.	
							Jenkins_Slave_Node	--> Used to execute the actual builds.
							
						Kubernetes_Master
							Kubernetes_WorkNode1
							Kubernetes_WorkNode2
							Kubernetes_WorkNode3
							
					Jenkins are used to automate the deployment of pods in kubernetes Cluster.
					
				Tools ::::
				
						Jenkins_Master 					--> git,jdk,jenkins 	
							JSlave_Node-Build_Server	--> Application Build Tool - Maven	=> artifacts(*.war/*jar)
															Docker Engine - Build the Container Image 
															Push the container Image to Container Registry(DockerHub)
															Tools : git,jdk,maven,docker							
						Kubernetes_Master				--> CRI-ContainerD,kubeadm,kubectl,kubelet		
							Kubernetes_WorkNode1
							Kubernetes_WorkNode2
							
							
				CICD Pipeline :::
				
					Stages ::: Set of Tasks to be performed.
					
						1. SCM_Checkout Stage 
						2. Build Stage 					->  Compile the code and create artifacts 
														    Unit Testing of the code 
						3. Build Docker Container Image ->  Use the artifacts and create docker image - Dockerfile
						4. Push the image to DockerHub Registry
						5. Deployed to Kubernetes_Cluster
						
				
				Jenkins_Master 														
					JSlave_Node-Build_Server	- SCM Repo is clone here.
                Kubernetes_Master			
                	Kubernetes_WorkNode1
                	Kubernetes_WorkNode2
					
					
				Source Code Repository : 
					Contains the Application Code and properties to build and deploy the applications
					
			Integration of ::
				
				Jenkins_Master 				
                	JSlave_Node-Build_Server
                Kubernetes_Master			
                	Kubernetes_WorkNode1
                	Kubernetes_WorkNode2
					
					
